input
{
    beats{
        port => 5044
    }
}

#
# Attempted to send a bulk request but there are no living connectio
# ns in the pool (perhaps Elasticsearch is unreachable or down?)

## match => { "message" => "%{TIMESTAMP_ISO8601:casetime:date} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
## will not conver casetime from text to date

## ECS v8 support is a preview of the unreleased ECS v8, and uses the v1 patterns. When Version 8 of the Elastic Common Schema becomes available, this plugin will need to be updated

filter
{
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:casetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
    # mutate { add_field => { "casetime" => "%{[timestamp]}"  }  }
    # mutate { add_tag => "%{[loglevel]}" }
    overwrite => [ "message" ]
  }

  ## Invalid conversion type 'date', expected one of 'string,integer,float,boolean,integer_eu,float_eu'
  # if [casetime] {
  #   mutate {
  #     convert => {
  #       "casetime" => "date"
  #     }
  #   }
  # }

  ## this will mess up the @timestamp value
  # if [timestamp]{
  #   date {
  #     match => [ "timestamp", "ISO8601" ]
  #     # overwrite => [ "timestamp" ]
  #   }
  # }

  if [casetime] {
    date {
      match => [ "casetime", "ISO8601" ]
      target => "casetime"
    }
  }

  if ![loglevel]{
    grok{
      # pba                           824767955349
      # compLen                       7
      match => { "message" => "^,?%{WORD}\s+:?\s+%{NUMBER:int}$" }
      add_field => { "loglevel" => "runningstatus"  }
    }

    grok{
      # , elba info:
      # , elba: 90068991
      match => { "message" => "^,\s+%{WORD}(\s+)?(%{WORD})?:(\s+)?(%{NUMBER})?$" }
      add_field => { "loglevel" => "runningstatus"  }
    }

    grok{
          ## Time pattern needs to be like: HH:mm:ss. So here use %{WORD:hh}:%{WORD:mm}
          # %{WORD:user}\s+%{NUMBER:pid}\s+%{NUMBER:ppid}\s+%{NUMBER:cpu}\s+%{WORD:hh}:%{WORD:mm}\s+\?\s+%{TIME:duration}%{GREEDYDATA:command}
          # root       32186   32184  0 13:58 ?        00:00:00 grep fio
          match => { "message" => "%{WORD}\s+%{NUMBER}\s+%{NUMBER}\s+%{NUMBER}\s+%{WORD}:%{WORD}\s+\?\s+%{TIME}%{GREEDYDATA}" }
          add_field => { "loglevel" => "INFO"  }
    }


    ## These are non-standard sentences
    ## Additional Smart Log for ScaleFlux device:/dev/nvme0 namespace-id:ffffffff
    ## key                               normalized raw

    grok{
          # %{WORD:key}\s+:\s+%{NUMBER:percent}%\s+%{NUMBER:count}
          # program_fail_count               : 100%       0
          # erase_fail_count                 : 100%       0
          match => { "message" => "%{WORD}\s+:\s+%{NUMBER}%\s+%{NUMBER}" }
          add_field => { "loglevel" => "INFO"  }
    }


    grok{
      ## These are non-standard sentences
      ##-    Repeat step1 ~step4 for 30 minutes
      ## Repeat step1~7 for 10 loops

      ## These are supported pattern
      # Step1: fio seq 128k full disk trim precondition
      # -   Step4. Send PF command
      # -   Step4: Send PF command
      #  -   Step4: Send PF command
      # ^ START from the begining
      # $ till the end
      # \w （字母数字）和 \W （非字母数字）
      # \b 匹配字母或数字边界
      match => { "message" => "^(?i)(\s+)?-?(\s+)?Step%{INT}\W %{GREEDYDATA}$" }
      add_field => { "loglevel" => "caseinfo" }
      # mutate cant not show in grok block
      # mutate { add_field => { "loglevel" => "caseinfo"  }  }
    }

    grok{
      # <xxx>
      # </xxx>
      match => { "message" => "</?%{WORD}>" }
      add_field => { "loglevel" => "caseinfo" }
    }

    # Need grok to deal with these logs:
    # Test Case Result:  Pass
    # =============== Test Summary ==============
    # Test Case Name:    SE_FormatBasicTest
    # Test Case Execution Time:   0:20:30 (hh:mm:ss.xxxx)
    grok{
      match => { "message" => "^Test Case %{WORD}(\s+)?(%{WORD})?:%{GREEDYDATA}$" }
      add_field => { "loglevel" => "caseinfo" }
    }
    if " Test Summary " in [message]{
    mutate { add_field => { "loglevel" => "caseinfo" } }
    }

  }


  # 2023-3-30 if grok filter failed then deal with the trace message?


  # if [stepinfo] or [casetag]{
  #   mutate { add_field => { "loglevel" => "caseinfo"  }  }
  # }


  if ![loglevel]{
    ## add tag tested, working, but the messages will have default tags.
    ## For example, [beats_input_codec_plain_applied, _grokparsefailure]
    # mutate { add_tag => "trace" }
    mutate { add_field => { "loglevel" => "trace"  }  }
  }

  # Two ways to get logname:
  ## samanea log name :Identify_IdfyCtrlValueVerify.py_2023-02-01_02-38-29.log
  ## other log name: xxxx.log
  ## 1. Using mutate plugin
  # mutate { add_field => { "logpath" => "%{[log][file][path]}"  }  }
  # mutate {
  #   split => { "logpath" => "/" }
  #   add_field => { "justtest" => "onlytest"  }
  #   add_field => { "logname" => "%{[logpath][-1]}"  }
  # }

  ## 2. Using ruby plugin
  ## Split can not use single qoute
  ruby {
		code => '
      event.set("logname", event.get("[log][file][path]").split("/")[-1])
    '
	}

  ## filter case name
  if ".py" in [logname]{
    ruby {
      code => '
        event.set("casename", event.get("logname").split(".py")[0]+".py")
      '
    }
  }else if ".sh" in [logname]{
    ruby {
      code => '
        event.set("casename", event.get("logname").split(".sh")[0]+".sh")
      '
    }
  }else{
    mutate { add_field => { "casename" => "[logname]"  }  }
  }

  ## add to @metadate
  # if "--" in [message]{
  #    mutate { add_field => { "[@metadata][testinfo]" => "%{[testinfo]}" } }
  # }

  # mutate {}
}

output
{
  if [@metadata][_id]{
    elasticsearch{
        hosts => ["https://192.168.39.21:9200"]
        #document_id => "%{[@metadata][_id]}"
        ssl => true
        user => elastic
        password => rogerfan
        index => "caselog-%{+YYYY.MM.dd}"
        cacert => "/usr/share/logstash/certs/ca/ca.crt"
    }
  }else{
    elasticsearch{
      hosts => ["https://192.168.39.21:9200"]
      ssl => true
      user => elastic
      password => rogerfan
      index => "logtest-without-document-id"
      cacert => "/usr/share/logstash/certs/ca/ca.crt" #cacert
    }
  }
    stdout{ codec => rubydebug {metadata => true} }
}
